/**
 * 
 */
package dbo;

/**
 * @author Ameya
 *
 */
/*import javax.naming.InitialContext;
import javax.naming.Context;
import javax.naming.NamingException;
import javax.sql.DataSource;*/

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Class concerned with:
 * - connecting to the database
 * - querying the database
 * @author Ameya
 *
 */
public class DatabaseAgent {

	// private DataSource dataSource ;

	/*private Connection getDbConnectionUsingDataSource(String jndi_name)
	{
		try {
			Context context = new InitialContext();
			dataSource = (DataSource) context.lookup(jndi_name); 
		} catch (NamingException e) {
			System.out.println("Error in setting data source context." + e.getMessage());
		}
		try {
			Connection conn = dataSource.getConnection("root", "amu5886");
			return conn ; 
		} catch (SQLException e) {
			System.out.println("Error in setting DB Connection" + e.getMessage());
		} 
		return null ;
	}*/

	/**
	 * Private class for creating connection with the database.
	 * @return
	 */
	private Connection getDbConnectionUsingDriverManager()
	{
		Connection connection = null ;
		try 
		{
			Class.forName("com.mysql.jdbc.Driver");
			connection = 
					DriverManager.getConnection("jdbc:mysql://localhost:3306/online_cd_store",
							"root", "root") ;
		} 
		catch (ClassNotFoundException e) 
		{
			System.out.println("Error: " + e.getMessage()) ;
		}
		catch (SQLException e)
		{
			System.out.println("Error: " + e.getMessage()) ;
		}
		return connection;
	}
	
	/**
	 * Returns the list of the string output generated by the database query.
	 * @param query : Query to be executed
	 * @return list of the string objects each containing the output of the query.
	 */
	public List<String> getResultSet(String query)
	{
		Connection conn = getDbConnectionUsingDriverManager() ;
		ResultSet rs = null;
		PreparedStatement sqlStmt;
		ArrayList<String> categories = null ;
		try 
		{
			sqlStmt = conn.prepareStatement(query);
			rs = sqlStmt.executeQuery() ;
			if (rs != null)
			{
				categories = new ArrayList<String>() ;
				while(rs.next())
				{
					categories.add(rs.getString(1));
				}
			}
		}
		catch (SQLException e) 
		{
			System.out.println("Error in query execution " + e.getMessage()) ;
		}
		finally 
		{
			try 
			{
				conn.close();
			} 
			catch (SQLException e) 
			{
				e.printStackTrace();
			}
		}
		
		return categories;
	}
}

